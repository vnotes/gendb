// Code generated by gendb; DO NOT EDIT.

{{$upperCamelCase := snakeCase2UpperCamelCase $.TableName}}
{{$stringToLower := stringToLower $.TableName}}

package {{$stringToLower}}api

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/jmoiron/sqlx"	
)


const TableName = "{{.TableName}}"


type column struct {
	{{range $key, $value := .Columns -}}
		{{snakeCase2UpperCamelCase $value.ColumnName}} string
	{{end -}}
}

var (
	Col = &column{
		{{range $key, $value := .Columns -}}
			{{snakeCase2UpperCamelCase $value.ColumnName}}: "{{$value.ColumnName}}",
        {{end -}}
    }
)

type Entity struct {
	{{range $key, $value := .Columns -}}
			{{if $value.ColumnComment -}}
				{{snakeCase2UpperCamelCase $value.ColumnName}} {{$value.DataType}} `db:"{{$value.ColumnName}}"` // {{$value.ColumnComment}}
			{{else -}}
				{{snakeCase2UpperCamelCase $value.ColumnName}} {{$value.DataType}} `db:"{{$value.ColumnName}}"`
			{{end -}}
	{{end -}}
}

type model interface {
	Insert(context.Context, ...map[string]interface{}) (sql.Result, error)
	Select(context.Context, map[string]interface{}, ...string) ([]*Entity, error)
}

type impl struct {
	db sqlx.ExtContext
}

var i *impl

func SetCli(db sqlx.ExtContext) {
	i = &impl{db: db}
}

func GetCli() model {
	return i
}

var _ model = (*impl)(nil)

func (i *impl) Insert(ctx context.Context, values ...map[string]interface{}) (sql.Result, error) {
	if len(values) == 0 {
		return nil, nil
	}
	var fields []string
	for k := range values[0] {
		fields = append(fields, k)
	}
	k := strings.Join(fields, ",")
	v := ":" + strings.Join(fields, ",:")
	s := fmt.Sprintf("INSERT INTO {{.TableName}} (%s) VALUES (%s);", k, v)
	result, err := sqlx.NamedExecContext(ctx, i.db, s, values)
	if err != nil {
		return nil, fmt.Errorf("insert error %w", err)
	}
	return result, nil
}

func (i *impl) Select(ctx context.Context, values map[string]interface{}, fields ...string) ([]*Entity, error) {
	var result []*Entity

	var s []string
	var args []interface{}
	for k, v := range values {
		s = append(s, fmt.Sprintf("%s=?", k))
		args = append(args, v)
	}
	var query = fmt.Sprintf("SELECT %s FROM {{.TableName}} WHERE %s", strings.Join(fields, ","), strings.Join(s, " and "))
	err := sqlx.SelectContext(ctx, i.db, &result, query, args...)
	if err != nil {
		return nil, fmt.Errorf("select error %w", err)
	}
	return result, nil
}